"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _postcss = require("postcss");

var _postcss2 = _interopRequireDefault(_postcss);

var _rules = require("./rules");

var _rules2 = _interopRequireDefault(_rules);

var _disableRanges = require("./disableRanges");

var _disableRanges2 = _interopRequireDefault(_disableRanges);

exports["default"] = _postcss2["default"].plugin("stylelint", function (settings) {
  return function (root, result) {
    if (!settings) {
      return;
    }
    if (!settings.rules) {
      return;
    }

    if (settings.plugins) {
      addPluginsToDefinitions(settings.plugins, _rules2["default"]);
    }

    // First check for disabled ranges
    (0, _disableRanges2["default"])(root, result);

    Object.keys(settings.rules).forEach(function (ruleName) {
      if (!_rules2["default"][ruleName]) {
        throw new Error("Undefined rule " + ruleName);
      }

      // If severity is 0, run nothing
      var ruleSettings = settings.rules[ruleName];
      var ruleSeverity = Array.isArray(ruleSettings) ? ruleSettings[0] : ruleSettings;
      if (ruleSeverity === 0) {
        return;
      }

      // Otherwise, run the rule with the primary and secondary options
      _rules2["default"][ruleName](ruleSettings[1], ruleSettings[2])(root, result);
    });
  };
});

function addPluginsToDefinitions(plugins, definitions) {
  Object.keys(plugins).forEach(function (name) {
    if (typeof plugins[name] !== "function") {
      addPluginsToDefinitions(plugins[name], definitions);
      return;
    }
    definitions[name] = plugins[name];
  });
}
module.exports = exports["default"];