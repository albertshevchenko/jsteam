"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require("../../utils");

var ruleName = "function-parentheses-space-inside";

exports.ruleName = ruleName;
var messages = (0, _utils.ruleMessages)(ruleName, {
  expectedOpening: "Expected single space after \"(\"",
  rejectedOpening: "Unexpected whitespace after \"(\"",
  expectedClosing: "Expected single space before \")\"",
  rejectedClosing: "Unexpected whitespace before \")\""
});

exports.messages = messages;

exports["default"] = function (expectation) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, {
      actual: expectation,
      possible: ["always", "never"]
    });
    if (!validOptions) {
      return;
    }

    root.walkDecls(function (decl) {
      var declString = decl.toString();

      (0, _utils.styleSearch)({ source: declString, target: "(" }, function (match) {
        checkOpening(declString, match.startIndex, decl);
      });
      (0, _utils.styleSearch)({ source: declString, target: ")" }, function (match) {
        checkClosing(declString, match.startIndex, decl);
      });
    });

    function checkOpening(source, index, node) {
      var nextCharIsSpace = source[index + 1] === " ";
      if (expectation === "always") {
        if (!nextCharIsSpace || (0, _utils.isWhitespace)(source[index + 2])) {
          (0, _utils.report)({
            message: messages.expectedOpening,
            node: node,
            index: index + 1,
            result: result,
            ruleName: ruleName
          });
        }
      } else if (expectation === "never") {
        if (nextCharIsSpace) {
          (0, _utils.report)({
            message: messages.rejectedOpening,
            node: node,
            index: index + 1,
            result: result,
            ruleName: ruleName
          });
        }
      }
    }

    function checkClosing(source, index, node) {
      var prevCharIsSpace = source[index - 1] === " ";
      if (expectation === "always") {
        if (!prevCharIsSpace || (0, _utils.isWhitespace)(source[index - 2])) {
          (0, _utils.report)({
            message: messages.expectedClosing,
            node: node,
            index: index - 1,
            result: result,
            ruleName: ruleName
          });
        }
      } else if (expectation === "never") {
        if (prevCharIsSpace) {
          (0, _utils.report)({
            message: messages.rejectedClosing,
            node: node,
            index: index - 1,
            result: result,
            ruleName: ruleName
          });
        }
      }
    }
  };
};